#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// startUpload(pay,uint64,uint64,string)void
//
//
// Allocate boxes to begin data upload process
//
// @param dataIdentifier The unique identifier for the data
// @param numBoxes The number of boxes that the data will take up
// @param endBoxSize The size of the last box
// @param mbrPayment Payment from the uploader to cover the box MBR
abi_route_startUpload:
	byte 0x; dupn 3 // push empty bytes to fill the stack frame for this subroutine's local variables

	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// endBoxSize: uint64
	txna ApplicationArgs 3
	btoi

	// numBoxes: uint64
	txna ApplicationArgs 2
	btoi

	// dataIdentifier: string
	txna ApplicationArgs 1
	extract 2 0

	// execute startUpload(pay,uint64,uint64,string)void
	callsub startUpload
	int 1
	return

startUpload:
	proto 8 0

	// examples/big_box/big_box.algo.ts:41
	// startBox = this.currentIndex.value
	byte 0x63757272656e74496e646578 // "currentIndex"
	app_global_get
	frame_bury -5 // startBox: uint64

	// examples/big_box/big_box.algo.ts:42
	// endBox = startBox + numBoxes - 1
	frame_dig -5 // startBox: uint64
	frame_dig -2 // numBoxes: uint64
	+
	int 1
	-
	frame_bury -6 // endBox: uint64

	// examples/big_box/big_box.algo.ts:44
	// metadata: Metadata = {
	//       start: startBox,
	//       end: endBox,
	//       status: IN_PROGRESS,
	//       endSize: endBoxSize,
	//     }
	frame_dig -5 // startBox: uint64
	itob
	frame_dig -6 // endBox: uint64
	itob
	concat
	byte 0x00
	concat
	frame_dig -3 // endBoxSize: uint64
	itob
	concat
	frame_bury -7 // metadata: Metadata

	// examples/big_box/big_box.algo.ts:51
	// assert(!this.metadata(dataIdentifier).exists)
	frame_dig -1 // dataIdentifier: string
	box_len
	swap
	pop
	!
	assert

	// examples/big_box/big_box.algo.ts:53
	// this.metadata(dataIdentifier).value = metadata
	frame_dig -1 // dataIdentifier: string
	frame_dig -7 // metadata: Metadata
	box_put

	// examples/big_box/big_box.algo.ts:55
	// this.currentIndex.value = endBox + 1
	byte 0x63757272656e74496e646578 // "currentIndex"
	frame_dig -6 // endBox: uint64
	int 1
	+
	app_global_put

	// examples/big_box/big_box.algo.ts:57
	// totalCost =
	//       numBoxes * COST_PER_BOX + // cost of boxes
	//       (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
	//       numBoxes * 64 * COST_PER_BYTE + // cost of keys
	//       endBoxSize * COST_PER_BYTE
	frame_dig -2 // numBoxes: uint64
	int 2500
	*
	frame_dig -2 // numBoxes: uint64
	int 1
	-
	int 32768
	*
	int 400
	*
	+
	frame_dig -2 // numBoxes: uint64
	int 64
	*
	int 400
	*
	+
	frame_dig -3 // endBoxSize: uint64
	int 400
	*
	+
	frame_bury -8 // totalCost: uint64

	// examples/big_box/big_box.algo.ts:63
	// verifyTxn(mbrPayment, { receiver: this.app.address, amount: totalCost })
	// verify receiver
	frame_dig -4 // mbrPayment: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -4 // mbrPayment: pay
	gtxns Amount
	frame_dig -8 // totalCost: uint64
	==
	assert
	retsub

// upload(bytes,uint64,uint64,string)void
//
//
// Upload data to a specific offset in a box
//
// @param dataIdentifier The unique identifier for the data
// @param boxIndex The index of the box to upload the given chunk of data to
// @param offset The offset within the box to start writing the data
// @param data The data to write
abi_route_upload:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// data: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// offset: uint64
	txna ApplicationArgs 3
	btoi

	// boxIndex: uint64
	txna ApplicationArgs 2
	btoi

	// dataIdentifier: string
	txna ApplicationArgs 1
	extract 2 0

	// execute upload(bytes,uint64,uint64,string)void
	callsub upload
	int 1
	return

upload:
	proto 5 0

	// examples/big_box/big_box.algo.ts:76
	// metadata = this.metadata(dataIdentifier).value
	frame_dig -1 // dataIdentifier: string
	frame_bury -5 // storage key//metadata

	// examples/big_box/big_box.algo.ts:77
	// assert(metadata.status === IN_PROGRESS)
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 16 1
	byte 0x00
	b==
	assert

	// examples/big_box/big_box.algo.ts:78
	// assert(metadata.start <= boxIndex && boxIndex <= metadata.end)
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 0 8
	btoi
	frame_dig -2 // boxIndex: uint64
	<=
	dup
	bz skip_and0
	frame_dig -2 // boxIndex: uint64
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 8 8
	btoi
	<=
	&&

skip_and0:
	assert

	// if0_condition
	// examples/big_box/big_box.algo.ts:80
	// offset === 0
	frame_dig -3 // offset: uint64
	int 0
	==
	bz if0_end

	// if0_consequent
	// examples/big_box/big_box.algo.ts:81
	// this.dataBoxes(boxIndex).create(boxIndex === metadata.end ? metadata.endSize : MAX_BOX_SIZE)
	frame_dig -2 // boxIndex: uint64
	itob
	frame_dig -2 // boxIndex: uint64
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 8 8
	btoi
	==
	bz ternary0_false
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 17 8
	btoi
	b ternary0_end

ternary0_false:
	int 32768

ternary0_end:
	box_create

if0_end:
	// examples/big_box/big_box.algo.ts:84
	// this.dataBoxes(boxIndex).replace(offset, data)
	frame_dig -2 // boxIndex: uint64
	itob
	frame_dig -3 // offset: uint64
	frame_dig -4 // data: bytes
	box_replace
	retsub

// setStatus(uint8,string)void
//
//
// Set the status of the data
//
// @param dataIdentifier The unique identifier for the data
// @param status The new status for the data
abi_route_setStatus:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// status: uint8
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert

	// dataIdentifier: string
	txna ApplicationArgs 1
	extract 2 0

	// execute setStatus(uint8,string)void
	callsub setStatus
	int 1
	return

setStatus:
	proto 3 0

	// examples/big_box/big_box.algo.ts:95
	// currentStatus = this.metadata(dataIdentifier).value.status
	frame_dig -1 // dataIdentifier: string
	box_get
	assert
	extract 16 1
	frame_bury -3 // currentStatus: uint8

	// examples/big_box/big_box.algo.ts:97
	// assert(status === READY || status === IMMUTABLE || status === IN_PROGRESS)
	frame_dig -2 // status: uint8
	byte 0x01
	b==
	dup
	bnz skip_or0
	frame_dig -2 // status: uint8
	byte 0x02
	b==
	||

skip_or0:
	dup
	bnz skip_or1
	frame_dig -2 // status: uint8
	byte 0x00
	b==
	||

skip_or1:
	assert

	// examples/big_box/big_box.algo.ts:98
	// assert(currentStatus !== IMMUTABLE)
	frame_dig -3 // currentStatus: uint8
	byte 0x02
	b!=
	assert

	// examples/big_box/big_box.algo.ts:100
	// this.metadata(dataIdentifier).value.status = status
	frame_dig -1 // dataIdentifier: string
	int 16
	frame_dig -2 // status: uint8
	box_replace
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "startUpload(string,uint64,uint64,pay)void"
	method "upload(string,uint64,uint64,byte[])void"
	method "setStatus(string,uint8)void"
	txna ApplicationArgs 0
	match abi_route_startUpload abi_route_upload abi_route_setStatus
	err