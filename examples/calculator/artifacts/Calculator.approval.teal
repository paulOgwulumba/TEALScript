#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

getSum:
	proto 2 1

	// examples/calculator/calculator.algo.ts:13
	// return a + b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	+
	retsub

getDifference:
	proto 2 1

	// examples/calculator/calculator.algo.ts:24
	// return a >= b ? a - b : b - a;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	>=
	bz ternary0_false
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	-
	b ternary0_end

ternary0_false:
	frame_dig -2 // b: uint64
	frame_dig -1 // a: uint64
	-

ternary0_end:
	retsub

// doMath(string,uint64,uint64)uint64
//
// A method that takes two numbers and does either addition or subtraction
//
// @param a The first number
// @param b The second number
// @param operation The operation to perform. Can be either 'sum' or 'difference'
//
// @returns The result of the operation
abi_route_doMath:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// operation: string
	txna ApplicationArgs 3
	extract 2 0

	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute doMath(string,uint64,uint64)uint64
	callsub doMath
	int 1
	return

doMath:
	proto 4 0

	// if0_condition
	// examples/calculator/calculator.algo.ts:39
	// operation === 'sum'
	frame_dig -3 // operation: string
	byte 0x73756d // "sum"
	==
	bz if0_elseif1_condition

	// if0_consequent
	// examples/calculator/calculator.algo.ts:40
	// result = this.getSum(a, b)
	frame_dig -2 // b: uint64
	frame_dig -1 // a: uint64
	callsub getSum
	frame_bury -4 // result: uint64
	b if0_end

if0_elseif1_condition:
	// examples/calculator/calculator.algo.ts:41
	// operation === 'difference'
	frame_dig -3 // operation: string
	byte 0x646966666572656e6365 // "difference"
	==
	bz if0_else

	// if0_elseif1_consequent
	// examples/calculator/calculator.algo.ts:42
	// result = this.getDifference(a, b)
	frame_dig -2 // b: uint64
	frame_dig -1 // a: uint64
	callsub getDifference
	frame_bury -4 // result: uint64
	b if0_end

if0_else:
	err // 'Invalid operation'

if0_end:
	// examples/calculator/calculator.algo.ts:45
	// return result;
	frame_dig -4 // result: uint64
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "doMath(uint64,uint64,string)uint64"
	txna ApplicationArgs 0
	match abi_route_doMath
	err