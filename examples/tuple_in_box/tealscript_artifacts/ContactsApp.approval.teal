#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// setMyContact(string,string)void
abi_route_setMyContact:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// company: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute setMyContact(string,string)void
	callsub setMyContact
	int 1
	return

setMyContact:
	proto 3 0

	// examples/tuple_in_box/app.algo.ts:12
	// contact: Contact = { name: name, company: company }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	frame_dig -1 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -2 // company: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -3 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:14
	// this.myContact.value = contact
	byte 0x6d79436f6e74616374 // "myContact"
	frame_dig -3 // contact: Contact
	app_global_put

	// examples/tuple_in_box/app.algo.ts:15
	// this.contacts(this.txn.sender).value = contact
	txn Sender
	dup
	box_del
	pop
	frame_dig -3 // contact: Contact
	box_put
	retsub

// addContact(address,string,string)void
abi_route_addContact:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// address: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// company: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute addContact(address,string,string)void
	callsub addContact
	int 1
	return

addContact:
	proto 4 0

	// examples/tuple_in_box/app.algo.ts:19
	// contact: Contact = { name: name, company: company }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	frame_dig -1 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -2 // company: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -4 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:20
	// this.contacts(address).value = contact
	frame_dig -3 // address: address
	dup
	box_del
	pop
	frame_dig -4 // contact: Contact
	box_put
	retsub

// updateContactField(address,string,string)void
abi_route_updateContactField:
	// address: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// value: string
	txna ApplicationArgs 2
	extract 2 0

	// field: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateContactField(address,string,string)void
	callsub updateContactField
	int 1
	return

updateContactField:
	proto 3 0

	// if0_condition
	// examples/tuple_in_box/app.algo.ts:24
	// field === 'name'
	frame_dig -1 // field: string
	byte 0x6e616d65 // "name"
	==
	bz if0_elseif1_condition

	// if0_consequent
	// examples/tuple_in_box/app.algo.ts:25
	// this.contacts(address).value.name = value
	frame_dig -3 // address: address
	box_get
	assert
	store 255 // full array
	int 0
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	int 0
	load 254 // element start
	substring3
	frame_dig -2 // value: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub get_length_difference
	load 250 // length difference
	load 251 // element head offset
	int 2
	+ // head ofset
	callsub update_dynamic_head
	load 255 // full array
	frame_dig -3 // address: address
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_elseif1_condition:
	// examples/tuple_in_box/app.algo.ts:26
	// field === 'company'
	frame_dig -1 // field: string
	byte 0x636f6d70616e79 // "company"
	==
	bz if0_else

	// if0_elseif1_consequent
	// examples/tuple_in_box/app.algo.ts:27
	// this.contacts(address).value.company = value
	frame_dig -3 // address: address
	box_get
	assert
	store 255 // full array
	int 2
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	int 0
	load 254 // element start
	substring3
	frame_dig -2 // value: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub get_length_difference
	load 255 // full array
	frame_dig -3 // address: address
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_else:
	err // 'Invalid field'

if0_end:
	retsub

// verifyContactName(address,string)void
abi_route_verifyContactName:
	// address: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute verifyContactName(address,string)void
	callsub verifyContactName
	int 1
	return

verifyContactName:
	proto 2 0

	// examples/tuple_in_box/app.algo.ts:32
	// assert(this.contacts(address).value.name === name)
	frame_dig -2 // address: address
	box_get
	assert
	store 255 // full array
	int 0
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	extract3
	extract 2 0
	frame_dig -1 // name: string
	==
	assert
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "setMyContact(string,string)void"
	method "addContact(string,string,address)void"
	method "updateContactField(string,string,address)void"
	method "verifyContactName(string,address)void"
	txna ApplicationArgs 0
	match abi_route_setMyContact abi_route_addContact abi_route_updateContactField abi_route_verifyContactName
	err

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

update_dynamic_head:
	proto 2 0
	frame_dig -2 // length difference
	load 255 // full array
	frame_dig -1 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 249 // subtract head difference
	bz subtract_head_difference
	+ // add difference to offset
	b end_calc_new_head

subtract_head_difference:
	swap
	- // subtract difference from offet

end_calc_new_head:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 255 // full array
	swap
	frame_dig -1 // offset
	swap
	replace3 // update offset
	store 255 // full array
	retsub

get_length_difference:
	load 252 // new element
	len // length of new element
	load 253 // element length
	<
	bnz swapped_difference
	load 252 // new element
	len // length of new element
	load 253 // element length
	int 1
	store 249 // subtract head difference
	b get_difference

swapped_difference:
	load 253 // element length
	load 252 // new element
	len // length of new element
	int 0
	store 249 // subtract head difference

get_difference:
	- // get length difference
	store 250 // length difference
	retsub