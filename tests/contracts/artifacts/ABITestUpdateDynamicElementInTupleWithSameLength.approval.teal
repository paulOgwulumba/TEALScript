#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// updateDynamicElementInTupleWithSameLength()(uint16,uint8[],uint16,uint8[],uint16)
abi_route_updateDynamicElementInTupleWithSameLength:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute updateDynamicElementInTupleWithSameLength()(uint16,uint8[],uint16,uint8[],uint16)
	callsub updateDynamicElementInTupleWithSameLength
	int 1
	return

updateDynamicElementInTupleWithSameLength:
	proto 1 0

	// tests/contracts/abi.algo.ts:700
	// a: [uint<16>, uint<8>[], uint<16>, uint<8>[], uint<16>] = [1, [2, 3, 4], 5, [6, 7, 8], 9]
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x000a // initial head offset
	byte 0x0001
	callsub process_static_tuple_element
	byte 0x0003020304
	callsub process_dynamic_tuple_element
	byte 0x0005
	callsub process_static_tuple_element
	byte 0x0003060708
	callsub process_dynamic_tuple_element
	byte 0x0009
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -1 // a: [uint16,uint8[],uint16,uint8[],uint16]

	// tests/contracts/abi.algo.ts:702
	// a[1] = [10, 11, 12]
	frame_dig -1 // a: [uint16,uint8[],uint16,uint8[],uint16]
	store 255 // full array
	int 2
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	int 0
	load 254 // element start
	substring3
	byte 0x00030a0b0c
	byte 0x00030a0b0c
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub get_length_difference
	load 250 // length difference
	load 251 // element head offset
	int 4
	+ // head ofset
	callsub update_dynamic_head
	load 255 // full array
	frame_bury -1 // a: [uint16,uint8[],uint16,uint8[],uint16]

	// tests/contracts/abi.algo.ts:704
	// return a;
	byte 0x151f7c75
	frame_dig -1 // a: [uint16,uint8[],uint16,uint8[],uint16]
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "updateDynamicElementInTupleWithSameLength()(uint16,uint8[],uint16,uint8[],uint16)"
	txna ApplicationArgs 0
	match abi_route_updateDynamicElementInTupleWithSameLength
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

update_dynamic_head:
	proto 2 0
	frame_dig -2 // length difference
	load 255 // full array
	frame_dig -1 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 249 // subtract head difference
	bz subtract_head_difference
	+ // add difference to offset
	b end_calc_new_head

subtract_head_difference:
	swap
	- // subtract difference from offet

end_calc_new_head:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 255 // full array
	swap
	frame_dig -1 // offset
	swap
	replace3 // update offset
	store 255 // full array
	retsub

get_length_difference:
	load 252 // new element
	len // length of new element
	load 253 // element length
	<
	bnz swapped_difference
	load 252 // new element
	len // length of new element
	load 253 // element length
	int 1
	store 249 // subtract head difference
	b get_difference

swapped_difference:
	load 253 // element length
	load 252 // new element
	len // length of new element
	int 0
	store 249 // subtract head difference

get_difference:
	- // get length difference
	store 250 // length difference
	retsub