#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// updateNamedTuple()string
abi_route_updateNamedTuple:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute updateNamedTuple()string
	callsub updateNamedTuple
	int 1
	return

updateNamedTuple:
	proto 1 0

	// tests/contracts/abi.algo.ts:616
	// a: {
	//       foo: uint<16>;
	//       bar: string;
	//     } = {
	//       foo: 1,
	//       bar: 'Hi?',
	//     }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	byte 0x0001
	callsub process_static_tuple_element
	byte 0x000348693f
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -1 // a: { foo: uint<16>; bar: string; }

	// tests/contracts/abi.algo.ts:624
	// a.bar = 'Hello World!'
	frame_dig -1 // a: { foo: uint<16>; bar: string; }
	store 255 // full array
	int 2
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	int 0
	load 254 // element start
	substring3
	byte 0x000c48656c6c6f20576f726c6421
	byte 0x000c48656c6c6f20576f726c6421
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub get_length_difference
	load 255 // full array
	frame_bury -1 // a: { foo: uint<16>; bar: string; }

	// tests/contracts/abi.algo.ts:626
	// return a.bar;
	frame_dig -1 // a: { foo: uint<16>; bar: string; }
	store 255 // full array
	int 2
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	extract3
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "updateNamedTuple()string"
	txna ApplicationArgs 0
	match abi_route_updateNamedTuple
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

get_length_difference:
	load 252 // new element
	len // length of new element
	load 253 // element length
	<
	bnz swapped_difference
	load 252 // new element
	len // length of new element
	load 253 // element length
	int 1
	store 249 // subtract head difference
	b get_difference

swapped_difference:
	load 253 // element length
	load 252 // new element
	len // length of new element
	int 0
	store 249 // subtract head difference

get_difference:
	- // get length difference
	store 250 // length difference
	retsub