#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// hasAsset(account)void
abi_route_hasAsset:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute hasAsset(account)void
	callsub hasAsset
	int 1
	return

hasAsset:
	proto 1 0

	// tests/contracts/account.algo.ts:6
	// assert(a.hasAsset(Asset.fromID(123)))
	frame_dig -1 // a: account
	int 123
	asset_holding_get AssetBalance
	swap
	pop
	assert
	retsub

// assetBalance(account)void
abi_route_assetBalance:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute assetBalance(account)void
	callsub assetBalance
	int 1
	return

assetBalance:
	proto 1 0

	// tests/contracts/account.algo.ts:10
	// assert(a.assetBalance(Asset.fromID(123)))
	frame_dig -1 // a: account
	int 123
	asset_holding_get AssetBalance
	assert
	assert
	retsub

// assetFrozen(account)void
abi_route_assetFrozen:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute assetFrozen(account)void
	callsub assetFrozen
	int 1
	return

assetFrozen:
	proto 1 0

	// tests/contracts/account.algo.ts:14
	// assert(a.assetFrozen(Asset.fromID(123)))
	frame_dig -1 // a: account
	int 123
	asset_holding_get AssetFrozen
	assert
	assert
	retsub

// hasBalance(account)void
abi_route_hasBalance:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute hasBalance(account)void
	callsub hasBalance
	int 1
	return

hasBalance:
	proto 1 0

	// tests/contracts/account.algo.ts:18
	// assert(a.hasBalance)
	frame_dig -1 // a: account
	acct_params_get AcctBalance
	swap
	pop
	assert
	retsub

// balance(account)void
abi_route_balance:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute balance(account)void
	callsub balance
	int 1
	return

balance:
	proto 1 0

	// tests/contracts/account.algo.ts:22
	// assert(a.balance)
	frame_dig -1 // a: account
	acct_params_get AcctBalance
	assert
	assert
	retsub

// minBalance(account)void
abi_route_minBalance:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute minBalance(account)void
	callsub minBalance
	int 1
	return

minBalance:
	proto 1 0

	// tests/contracts/account.algo.ts:26
	// assert(a.minBalance)
	frame_dig -1 // a: account
	acct_params_get AcctMinBalance
	assert
	assert
	retsub

// authAddr(account)void
abi_route_authAddr:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute authAddr(account)void
	callsub authAddr
	int 1
	return

authAddr:
	proto 1 0

	// tests/contracts/account.algo.ts:30
	// log(a.authAddr)
	frame_dig -1 // a: account
	acct_params_get AcctAuthAddr
	assert
	log
	retsub

// totalNumUint(account)void
abi_route_totalNumUint:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute totalNumUint(account)void
	callsub totalNumUint
	int 1
	return

totalNumUint:
	proto 1 0

	// tests/contracts/account.algo.ts:34
	// assert(a.totalNumUint)
	frame_dig -1 // a: account
	acct_params_get AcctTotalNumUint
	assert
	assert
	retsub

// totalNumByteSlice(account)void
abi_route_totalNumByteSlice:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute totalNumByteSlice(account)void
	callsub totalNumByteSlice
	int 1
	return

totalNumByteSlice:
	proto 1 0

	// tests/contracts/account.algo.ts:38
	// assert(a.totalNumByteSlice)
	frame_dig -1 // a: account
	acct_params_get AcctTotalNumByteSlice
	assert
	assert
	retsub

// totalExtraAppPages(account)void
abi_route_totalExtraAppPages:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute totalExtraAppPages(account)void
	callsub totalExtraAppPages
	int 1
	return

totalExtraAppPages:
	proto 1 0

	// tests/contracts/account.algo.ts:42
	// assert(a.totalExtraAppPages)
	frame_dig -1 // a: account
	acct_params_get AcctTotalExtraAppPages
	assert
	assert
	retsub

// totalAppsCreated(account)void
abi_route_totalAppsCreated:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute totalAppsCreated(account)void
	callsub totalAppsCreated
	int 1
	return

totalAppsCreated:
	proto 1 0

	// tests/contracts/account.algo.ts:46
	// assert(a.totalAppsCreated)
	frame_dig -1 // a: account
	acct_params_get AcctTotalAppsCreated
	assert
	assert
	retsub

// totalAppsOptedIn(account)void
abi_route_totalAppsOptedIn:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute totalAppsOptedIn(account)void
	callsub totalAppsOptedIn
	int 1
	return

totalAppsOptedIn:
	proto 1 0

	// tests/contracts/account.algo.ts:50
	// assert(a.totalAppsOptedIn)
	frame_dig -1 // a: account
	acct_params_get AcctTotalAppsOptedIn
	assert
	assert
	retsub

// totalAssetsCreated(account)void
abi_route_totalAssetsCreated:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute totalAssetsCreated(account)void
	callsub totalAssetsCreated
	int 1
	return

totalAssetsCreated:
	proto 1 0

	// tests/contracts/account.algo.ts:54
	// assert(a.totalAssetsCreated)
	frame_dig -1 // a: account
	acct_params_get AcctTotalAssetsCreated
	assert
	assert
	retsub

// totalAssets(account)void
abi_route_totalAssets:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute totalAssets(account)void
	callsub totalAssets
	int 1
	return

totalAssets:
	proto 1 0

	// tests/contracts/account.algo.ts:58
	// assert(a.totalAssets)
	frame_dig -1 // a: account
	acct_params_get AcctTotalAssets
	assert
	assert
	retsub

// totalBoxes(account)void
abi_route_totalBoxes:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute totalBoxes(account)void
	callsub totalBoxes
	int 1
	return

totalBoxes:
	proto 1 0

	// tests/contracts/account.algo.ts:62
	// assert(a.totalBoxes)
	frame_dig -1 // a: account
	acct_params_get AcctTotalBoxes
	assert
	assert
	retsub

// totalBoxBytes(account)void
abi_route_totalBoxBytes:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute totalBoxBytes(account)void
	callsub totalBoxBytes
	int 1
	return

totalBoxBytes:
	proto 1 0

	// tests/contracts/account.algo.ts:66
	// assert(a.totalBoxBytes)
	frame_dig -1 // a: account
	acct_params_get AcctTotalBoxBytes
	assert
	assert
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "hasAsset(account)void"
	method "assetBalance(account)void"
	method "assetFrozen(account)void"
	method "hasBalance(account)void"
	method "balance(account)void"
	method "minBalance(account)void"
	method "authAddr(account)void"
	method "totalNumUint(account)void"
	method "totalNumByteSlice(account)void"
	method "totalExtraAppPages(account)void"
	method "totalAppsCreated(account)void"
	method "totalAppsOptedIn(account)void"
	method "totalAssetsCreated(account)void"
	method "totalAssets(account)void"
	method "totalBoxes(account)void"
	method "totalBoxBytes(account)void"
	txna ApplicationArgs 0
	match abi_route_hasAsset abi_route_assetBalance abi_route_assetFrozen abi_route_hasBalance abi_route_balance abi_route_minBalance abi_route_authAddr abi_route_totalNumUint abi_route_totalNumByteSlice abi_route_totalExtraAppPages abi_route_totalAppsCreated abi_route_totalAppsOptedIn abi_route_totalAssetsCreated abi_route_totalAssets abi_route_totalBoxes abi_route_totalBoxBytes
	err