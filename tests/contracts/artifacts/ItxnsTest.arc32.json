{
  "hints": {
    "payment()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetCreation()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "appCall()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetConfig()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetFreeze()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetTransfer()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "methodCall()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "onlineKeyRegistration()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "offlineKeyRegistration()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "ItxnsTest",
    "desc": "",
    "methods": [
      {
        "name": "payment",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "assetCreation",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "appCall",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "assetConfig",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "assetFreeze",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "assetTransfer",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "methodCall",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "onlineKeyRegistration",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "offlineKeyRegistration",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}