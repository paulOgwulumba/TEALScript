#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// u64plus(uint64,uint64)uint64
abi_route_u64plus:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute u64plus(uint64,uint64)uint64
	callsub u64plus
	int 1
	return

u64plus:
	proto 2 0

	// tests/contracts/math.algo.ts:8
	// return a + b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	+
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// u64minus(uint64,uint64)uint64
abi_route_u64minus:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute u64minus(uint64,uint64)uint64
	callsub u64minus
	int 1
	return

u64minus:
	proto 2 0

	// tests/contracts/math.algo.ts:12
	// return a - b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	-
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// u64mul(uint64,uint64)uint64
abi_route_u64mul:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute u64mul(uint64,uint64)uint64
	callsub u64mul
	int 1
	return

u64mul:
	proto 2 0

	// tests/contracts/math.algo.ts:16
	// return a * b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	*
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// u64div(uint64,uint64)uint64
abi_route_u64div:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute u64div(uint64,uint64)uint64
	callsub u64div
	int 1
	return

u64div:
	proto 2 0

	// tests/contracts/math.algo.ts:20
	// return a / b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	/
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// u256plus(uint256,uint256)uint256
abi_route_u256plus:
	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute u256plus(uint256,uint256)uint256
	callsub u256plus
	int 1
	return

u256plus:
	proto 2 0

	// tests/contracts/math.algo.ts:24
	// return <uint<256>>(a + b);
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// u256minus(uint256,uint256)uint256
abi_route_u256minus:
	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute u256minus(uint256,uint256)uint256
	callsub u256minus
	int 1
	return

u256minus:
	proto 2 0

	// tests/contracts/math.algo.ts:28
	// return <uint<256>>(a - b);
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// u256mul(uint256,uint256)uint256
abi_route_u256mul:
	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute u256mul(uint256,uint256)uint256
	callsub u256mul
	int 1
	return

u256mul:
	proto 2 0

	// tests/contracts/math.algo.ts:32
	// return <uint<256>>(a * b);
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b*
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// u256div(uint256,uint256)uint256
abi_route_u256div:
	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute u256div(uint256,uint256)uint256
	callsub u256div
	int 1
	return

u256div:
	proto 2 0

	// tests/contracts/math.algo.ts:36
	// return <uint<256>>(a / b);
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b/
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// u64Return256(uint64,uint64)uint256
abi_route_u64Return256:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute u64Return256(uint64,uint64)uint256
	callsub u64Return256
	int 1
	return

u64Return256:
	proto 2 0

	// tests/contracts/math.algo.ts:40
	// return <uint<256>>(a + b);
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	+
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// maxU64()uint64
abi_route_maxU64:
	// execute maxU64()uint64
	callsub maxU64
	int 1
	return

maxU64:
	proto 0 0

	// tests/contracts/math.algo.ts:45
	// return 18_446_744_073_709_551_615;
	byte 0x151f7c75ffffffffffffffff
	log
	retsub

// btobigintFirst(string)uint64
abi_route_btobigintFirst:
	// input: string
	txna ApplicationArgs 1
	extract 2 0

	// execute btobigintFirst(string)uint64
	callsub btobigintFirst
	int 1
	return

btobigintFirst:
	proto 1 0

	// tests/contracts/math.algo.ts:49
	// return <uint64>(btobigint(input) / 1);
	frame_dig -1 // input: string
	byte 0x01
	b/
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// btobigintSecond(string)uint64
abi_route_btobigintSecond:
	// input: string
	txna ApplicationArgs 1
	extract 2 0

	// execute btobigintSecond(string)uint64
	callsub btobigintSecond
	int 1
	return

btobigintSecond:
	proto 1 0

	// tests/contracts/math.algo.ts:53
	// return <uint64>(1000 / btobigint(input));
	byte 0x03e8
	frame_dig -1 // input: string
	b/
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// exponent(uint64,uint64)uint64
abi_route_exponent:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute exponent(uint64,uint64)uint64
	callsub exponent
	int 1
	return

exponent:
	proto 2 0

	// tests/contracts/math.algo.ts:57
	// return a ** b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	exp
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// variableTypeHint(uint8,uint8)uint16
abi_route_variableTypeHint:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// y: uint8
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert

	// x: uint8
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert

	// execute variableTypeHint(uint8,uint8)uint16
	callsub variableTypeHint
	int 1
	return

variableTypeHint:
	proto 3 0

	// tests/contracts/math.algo.ts:61
	// z = <uint<16>>(x + y)
	frame_dig -1 // x: uint8
	btoi
	frame_dig -2 // y: uint8
	btoi
	+
	itob
	dup
	bitlen
	int 8
	<=
	assert
	extract 7 1
	dup
	bitlen
	int 16
	<=
	assert
	byte 0xFFFF
	b&
	frame_bury -3 // z: uint16

	// tests/contracts/math.algo.ts:63
	// return z;
	byte 0x151f7c75
	frame_dig -3 // z: uint16
	concat
	log
	retsub

// uint8plus(uint8,uint8)uint8
abi_route_uint8plus:
	// b: uint8
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert

	// a: uint8
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert

	// execute uint8plus(uint8,uint8)uint8
	callsub uint8plus
	int 1
	return

uint8plus:
	proto 2 0

	// tests/contracts/math.algo.ts:67
	// return a + b;
	frame_dig -1 // a: uint8
	btoi
	frame_dig -2 // b: uint8
	btoi
	+
	itob
	dup
	bitlen
	int 8
	<=
	assert
	extract 7 1
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// uint8exp(uint8,uint8)uint8
abi_route_uint8exp:
	// b: uint8
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert

	// a: uint8
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert

	// execute uint8exp(uint8,uint8)uint8
	callsub uint8exp
	int 1
	return

uint8exp:
	proto 2 0

	// tests/contracts/math.algo.ts:71
	// return a ** b;
	frame_dig -1 // a: uint8
	btoi
	frame_dig -2 // b: uint8
	btoi
	exp
	itob
	dup
	bitlen
	int 8
	<=
	assert
	extract 7 1
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "u64plus(uint64,uint64)uint64"
	method "u64minus(uint64,uint64)uint64"
	method "u64mul(uint64,uint64)uint64"
	method "u64div(uint64,uint64)uint64"
	method "u256plus(uint256,uint256)uint256"
	method "u256minus(uint256,uint256)uint256"
	method "u256mul(uint256,uint256)uint256"
	method "u256div(uint256,uint256)uint256"
	method "u64Return256(uint64,uint64)uint256"
	method "maxU64()uint64"
	method "btobigintFirst(string)uint64"
	method "btobigintSecond(string)uint64"
	method "exponent(uint64,uint64)uint64"
	method "variableTypeHint(uint8,uint8)uint16"
	method "uint8plus(uint8,uint8)uint8"
	method "uint8exp(uint8,uint8)uint8"
	txna ApplicationArgs 0
	match abi_route_u64plus abi_route_u64minus abi_route_u64mul abi_route_u64div abi_route_u256plus abi_route_u256minus abi_route_u256mul abi_route_u256div abi_route_u64Return256 abi_route_maxU64 abi_route_btobigintFirst abi_route_btobigintSecond abi_route_exponent abi_route_variableTypeHint abi_route_uint8plus abi_route_uint8exp
	err